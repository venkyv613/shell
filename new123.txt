Shell Script:
A shell script is a computer program designed to be run by the Unix/Linux shell.


***************************************
bash file.sh 
sh means born shell .sh is optional , .not mandatory 
.sh only identification which is only for understanding people
***************************************

sh 1.sh or bash 1.sh or ./1.sh

./1.sh -> current directory 
sh 1.sh -> 

**************************************

bash file.sh bash - default shell file.sh - it contains group of commands

every shell file general way execute , but in this file have execute permission. ./file.sh

read -4     r
write-2     w
execure -1  x

ls -l file.sh chmod +x file.sh ./file.sh

****************************************

/opt/scripts/file.sh or go to that dir and execute shell file ./file.sh

*****************************************
name:

# Author : SVN Reddy
# Script follows here:

echo "What is your name?"
read PERSON
echo "Hello, $PERSON"
********************************


generate report:
 vi file.sh 
 uname -r > /tmp/report.out 
 uname -m >> /tmp/report.out 
 echo $SHELL >> /tmp/report.out

echo - which displays the given string on screen. echo hello echo devops

****************************************

vi file.sh 
echo kernal information   : uname -r 
echo machine architecture : uname -m

vi 2.sh
echo kernal information      : `uname -r`
echo machine architecuture   : `uname -m`



vi file1.sh

print working directory : `pwd`
disk usage              : `du -h`
today date              : `date`
Listing files           : `ls`

****************************************

`` -> these are used to substitute the commands 
'' -> single quote  
"" -> double quote

\ - > back slash 
\t -> tab default 
\n -> new line 
' -> print single quotes 
" -> print double quote 
\ -> print back slash

echo 'devops' 
echo "devops" 
echo devops 
echo 'devops\tTechnology'    - notworking
echo 'devops\nTechnology'    - notworking

echo -e 'Devops\nTechnology' e means enable 
echo -e 'Devops\tTechnology'

******************************************

echo -e print working directory : \t`pwd`
echo -e 'disk usage             : \t`du -h`'
echo -e "today date             : \t`date`"
echo -e "Listing files          : \n`ls`"

*****************************************

Variable

Defination: variable is nothing but data contains we having 2 types of variables

1.system defined varibale or environment varibales 
2.user defined varibales

1.system defined variables: These  are used to define the system behaviour.

exp: 
echo $SHELL
echo $HOME
echo $PATH
echo $USER
echo $PWD


2.user defined variables:
	variables are defined into different categories 
	1)local variables
	2)global varibales

 1)local variables:
 ex:
 echo $0  -> current shell
 #a=10 
 echo a
 echo $a
 
 #sh - changing shell 
 sh -> echo $a
 no output, so a is local variable
 echo $a[come to bash shell]
 
 
 2)global varibles:
  It can be accessed by any other shell in the machine.
 exp: b=devops
 export b
 echo $b
 #sh
 #echo $b
  
  
  
1) How To Count The Number Of Files And Folders/Directories?

p=/opt
fc=`ls -l $p | grep ^- | wc -l`
dc=`ls -l $p | grep ^d | wc -l`
echo "path:$p"
echo "num of files : $fc"
echo "num of dir : $dc"


************************************************
she-band (or) hash-bang
#-hash
!-bang
#!/bin/bash - executing only bash 
Hash-Bang indicates the shell to be used to execute the script.

bourne -> bourne shell features

#!/bin/ksh
ksh    -> Korn Shell Features
**********************************************

Command line arguments (or) positional parameters:

cp -> cmd

cp -> program 
program is nothing but group of statements

cp f1 f2
f1,f2 -> arguments , nothing but inputs
f1,f2 -> positional parameters 

cp f1 f2

f1 -> first argument
f2 -> second argument

-> command line arguments like $0,$1, $2, $3 etc.
`$1` for `value of 1st argument passed`
`$2` for 'value of 2nd argument passed`
-> positional parameters refers cmd line argu.

*********************************************

$0 - Refers program name
$? - The exit status of the last command executed.
$# - The number of arguments supplied to a script.
$$ - process id
$* - All arguments

*********************************************

Operators:

Arithmetic Operators:

+ (Addition)	    Adds values on either side of the operator	        `expr $a + $b` 
- (Subtraction)	    Subtracts right hand operand from left hand operand	`expr $a - $b` 
\* (Multiplication)	Multiplies values on either side of the operator	`expr $a \* $b`
/ (Division)	    Divides left hand operand by right hand operand	    `expr $b / $a`

Relational Operators:

-eq -> Equal to      
-ne -> Not equal to 
-gt -> Greater than 
-lt -> Less than 
-ge -> Greater than equal to
-le -> Less than equal to 

Logical operators:

-o -> 	Logical OR
-a -> 	Logical AND
!  -> 	Logical Not

********************************************

if...else statements
->If else statements are useful decision-making statements.

syntax:
if [expression]
then
statements
fi




























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 






